/*
  Author:: Doug MacEachern <dougm@vmware.com>
  Author:: Fletcher Nichol <fnichol@nichol.ca>
  Author:: Noah Kantrowitz <noah@coderanger.net>

  Copyright 2010, VMware, Inc.
  Copyright 2013, Balanced, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

import jenkins.model.*
import jenkins.slaves.*
import hudson.model.*
import hudson.slaves.*

app = Jenkins.instance
env = <% if @new_resource.env && !@new_resource.env.empty? -%>
new hudson.EnvVars([<%= @new_resource.env.map { |k, v| %Q("#{k}":"#{v}") }.join(',') %>])
<%- else -%>
null
<%- end -%>
props = []

def new_ssh_launcher(args) {
  Jenkins.instance.pluginManager.getPlugin('ssh-slaves').classLoader.
    loadClass('hudson.plugins.sshslaves.SSHLauncher').
      getConstructor([String, int, String, String, String, String] as Class[]).newInstance(args)
}

if (env != null) {
  entries = env.map { k,v -> new EnvironmentVariablesNodeProperty.Entry(k,v) }
  props << new EnvironmentVariablesNodeProperty(entries)
}

slave = new DumbSlave("<%= @new_resource.node_name %>", "<%= @new_resource.description %>", "<%= @new_resource.path.gsub('\\', '\\\\\\') %>",
                      "<%= @new_resource.executors %>", Node.Mode.<%= @new_resource.mode.upcase %>, "<%= @new_resource.labels.join(' ') %>",
                       <%= @launcher %>,
                       new RetentionStrategy.<%= @new_resource.availability.capitalize %>(<%= @new_resource.availability == 'demand' ? "#{@new_resource.in_demand_delay}, #{@new_resource.idle_delay}" : '' %>), props)

nodes = new ArrayList(app.getNodes())
ix = nodes.indexOf(slave)
if (ix >= 0) {
  nodes.set(ix, slave)
}
else {
  nodes.add(slave)
}

app.setNodes(nodes)
